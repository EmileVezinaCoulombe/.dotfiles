[user]
    name = EmileVezinaCoulombe
    email = emilevezinacoulombe@icloud.com

[credential "https://github.com"]
    helper = 
    helper = !gh auth git-credential

[credential "https://gist.github.com"]
    helper = 
    helper = !gh auth git-credential

[init]
    defaultBranch = main

[core]
    editor = nvim
    pager = delta
    excludesfile = ~/.config/git/ignore

[diff]
    colorMoved = default
    submodule = log

[interactive]
    diffFilter = delta --color-only

[merge]
    tool = nvim
    conflictstyle = diff3

[color]
    ui = true

[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = yellow bold 52
    newNormal = green bold
    newHighlight = cyan bold 22

[color "diff"]
    meta = 11
    frag = magenta bold
    func = 146 bold
    commit = cyan bold
    old = red bold
    new = green bold
    whitespace = red reverse

[alias]
    # Project info
    project = !onefetch
    fame = !python -m gitfame

    # Interactive add with fzf
    fza = !git ls-files -m -o --exclude-standard | fzf --preview 'git diff --color=always {}' --preview-window=right:70% --multi --print0 | xargs -0 -t -o git add

    # Interactive conventional commit
    cc = !~/.config/git/git-conventional-commit.bash

    # Interactive rebase from selected commit to HEAD
    irb = "!f() { \
        commit=$(git log --oneline | fzf --preview 'git show --color=always {1}' | cut -d' ' -f1); \
        if [ -n \"$commit\" ]; then \
            git rebase -i $commit~1; \
        fi; \
    }; f"

    # Interactive rebase between two commits
    irb2 = "!f() { \
        echo 'Select base commit (older):'; \
        base=$(git log --oneline | fzf --preview 'git show --color=always {1}' | cut -d' ' -f1); \
        if [ -n \"$base\" ]; then \
            echo 'Select target commit (newer):'; \
            target=$(git log --oneline $base..HEAD | fzf --preview 'git show --color=always {1}' | cut -d' ' -f1); \
            if [ -n \"$target\" ]; then \
                git rebase -i $base~1 $target; \
            fi; \
        fi; \
    }; f"

    # Reword selected commit
    reword = "!f() { \
        commit=$(git log --oneline | fzf --preview 'git show --color=always {1}' | cut -d' ' -f1); \
        if [ -n \"$commit\" ]; then \
            GIT_SEQUENCE_EDITOR=\"sed -i -e 's/^pick /reword /g'\" git rebase -i $commit~1; \
        fi; \
    }; f"

    # Interactive stash operations
    spi = "!f() { \
        git stash list | fzf --preview 'git stash show -p --color=always {1}' | cut -d: -f1 | xargs git stash pop; \
    }; f"

    sai = "!f() { \
        git stash list | fzf --preview 'git stash show -p --color=always {1}' | cut -d: -f1 | xargs git stash apply; \
    }; f"

    sdi = "!f() { \
        git stash list | fzf --preview 'git stash show -p --color=always {1}' | cut -d: -f1 | xargs git stash drop; \
    }; f"

    # Move commit up/down
    cup = "!f() { \
        commit=$(git log --oneline | fzf --preview 'git show --color=always {1}' | cut -d' ' -f1); \
        if [ -n \"$commit\" ]; then \
            git rebase -i $commit~2 --exec 'git commit --amend --no-edit --date=\"$(date)\"'; \
        fi; \
    }; f"

    cdown = "!f() { \
        commit=$(git log --oneline | fzf --preview 'git show --color=always {1}' | cut -d' ' -f1); \
        if [ -n \"$commit\" ]; then \
            git checkout $commit && \
            git cherry-pick $commit~1 && \
            git reset --hard HEAD~2 && \
            git cherry-pick ORIG_HEAD~1 ORIG_HEAD; \
        fi; \
    }; f"

    # Pretty logs with fzf preview
    flog = "!f() { \
        git log --graph --color=always --format='%C(auto)%h%d %s %C(black)%C(bold)%cr' | \
        fzf --ansi --no-sort --reverse --tiebreak=index \
            --preview 'git show --color=always {2}' \
            --bind 'ctrl-d:preview-down,ctrl-u:preview-up'; \
    }; f"

    # Branch management
    cb = "!f() { \
        git branch --all | grep -v HEAD | \
        fzf --preview 'git log --color=always --oneline --graph {1}' | \
        sed 's/.* //' | sed 's#remotes/[^/]*/##' | \
        xargs git checkout; \
    }; f"

    # Find branches containing commit
    fb = "!f() { \
        commit=$(git log --oneline | fzf --preview 'git show --color=always {1}' | cut -d' ' -f1); \
        if [ -n \"$commit\" ]; then \
            git branch -a --contains $commit; \
        fi; \
    }; f"

    # Interactive fixup
    fixup = "!f() { \
        commit=$(git log --oneline | fzf --preview 'git show --color=always {1}' | cut -d' ' -f1); \
        if [ -n \"$commit\" ]; then \
            git commit --fixup=$commit && GIT_SEQUENCE_EDITOR=: git rebase -i --autosquash $commit~1; \
        fi; \
    }; f"

    # Clean merged branches
    cleanup = "!git branch --merged | grep -v '\\*\\|master\\|main\\|develop' | xargs -n 1 git branch -d"

    # Pretty logs
    plog1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'
    plog2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
    plog3 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n          %C(white)%s%C(reset)%n          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'
